@using bodyline_sports.Models
@using bodyline_sports.Services

@inject IFacebook facebook
@inject ILogger<AccessTokenAdmin> logger

<h2 class="font-semibold">Access token</h2>
<div>
    <p class="text-sm text-gray-400 p-2.5">Access token will expire on @(ExpiresAt?.LocalDateTime.ToString() ?? "ü§∑‚Äç‚ôÇÔ∏è")
    </p>
    <div class="relative">
        <button type="button" @onclick="OnGenerateNewToken"
            class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Generate
            new token</button>
    </div>
</div>

@code {
    [Parameter]
    public required string UserAccessToken { get; set; }

    [Parameter]
    public required string LongLivedAccessToken { get; set; }

    [Parameter]
    public required DateTimeOffset? ExpiresAt { get; set; }

    [Parameter]
    public EventCallback<string> LongLivedAccessTokenChanged { get; set; }

    private async Task OnGenerateNewToken()
    {
        LongLivedAccessToken = await facebook.ExchangeForLongLivedToken(UserAccessToken);
        try
        {
            ExpiresAt = (await facebook.GetTokenDetails(LongLivedAccessToken)).Data.ExpiresAt;
        }
        catch (HttpRequestException e)
        {
            logger.LogError(e, "{exceptionMessage} getting token expiry", e.Message);
        }
        await LongLivedAccessTokenChanged.InvokeAsync(LongLivedAccessToken);
    }
}