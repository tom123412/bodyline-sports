@page "/admin"
@using Azure.Data.AppConfiguration
@using Azure.Identity
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Extensions.Configuration.AzureAppConfiguration
@using Microsoft.Extensions.Configuration.UserSecrets
@using Microsoft.Extensions.Options
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using System.Text.Json
@using System.Dynamic
@using bodyline_sports.Components.Components
@using bodyline_sports.Models
@using bodyline_sports.Services
@using global::bodyline_sports.Options

@inject IOptionsSnapshot<ContactOptions> contactOptions
@inject IOptions<AzureOptions> azureOptions
@inject IOptions<FacebookOptions> facebookOptions
@inject IFacebook facebook


@inject IConfigurationRefresherProvider refresherProvider
@inject IHttpContextAccessor httpContextAccessor

@attribute [Authorize(Policy="Admin")]

<PageTitle>Bodyline Sports (Admin)</PageTitle>

<AuthorizeView Context="authContext">
  <Authorized>
    <p class="flex justify-end pr-2">Hello, @authContext.User.Identity?.Name!</p>
    <EditForm OnValidSubmit="OnSubmit" FormName="AdminForm" EditContext="_editContext" Enhance novalidate>
      <DataAnnotationsValidator />
      <ValidationSummary class="text-xs text-red-600" />
      <div class="p-4">
        <h2 class="font-semibold">Contact details</h2>
        <div class="mb-4 mt-4 grid lg:grid-cols-2 gap-10">
          <div>
            <div class="relative">
              <InputText @bind-Value="Model!.Email" id="email" type="email"
                class="px-2.5 pb-2.5 pt-4 w-full text-sm text-gray-900 bg-transparent rounded-lg border-2 border-gray-300 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
                placeholder=" " />
              <label for="email"
                class="absolute text-sm text-gray-500 duration-300 transform -translate-y-4 scale-75 top-2 z-10 origin-[0] bg-white px-2 peer-focus:px-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:scale-75 peer-focus:-translate-y-4 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto start-1">Email</label>
            </div>
            <ValidationMessage For="() => Model.Email" class="mt-2 text-xs text-red-600" />
          </div>
        </div>

        <AccessTokenAdmin LongTermAccessToken="@Model.AccessToken" TokenDetails="@Model.TokenData" @rendermode="InteractiveAuto"/>

        <button type="submit" class="rounded-md bg-indigo-600 px-3 py-2 mt-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Save</button>
      </div>
    </EditForm>
  </Authorized>
  <NotAuthorized>
    <p>You're not authorized.</p>
  </NotAuthorized>
</AuthorizeView>

@code {
  private sealed class Details
  {
    [EmailAddress]
    public required string Email { get; set; }
    public Uri? EmailLink { get; set; }
    public string? LandLine { get; set; }
    public Uri? LandLineLink { get; set; }
    public string? Mobile { get; set; }
    public Uri? MobileLink { get; set; }
    public string? Address { get; set; }
    public Uri? AddressLink { get; set; }
    public string? FacebookPageName { get; set; }
    public Uri? FacebookPageLink { get; set; }
    public TokenData? TokenData { get; set; }
    public required string AccessToken { get; set; }
  }

  private EditContext? _editContext;

  [SupplyParameterFromForm]
  private Details? Model { get; set; }

  protected async override Task OnInitializedAsync()
  {
    Model!.TokenData = (await facebook.GetTokenDetails()).Data;

    var token = await (httpContextAccessor.HttpContext?.GetTokenAsync("access_token") ?? Task.FromResult(default(string?)));

    await base.OnInitializedAsync();
  }

  protected override void OnInitialized()
  {
    Model ??= new()
      {
        Email = contactOptions.Value.Email,
        EmailLink = contactOptions.Value.EmailLink,
        LandLine = contactOptions.Value.LandLine,
        LandLineLink = contactOptions.Value.LandLineLink,
        AccessToken = facebookOptions.Value.AccessToken,
      };
    _editContext = new(Model);

    base.OnInitialized();
  }

  private void OnGenerateNewToken()
  {

  }

  private async Task OnSubmit()
  {
    const string EmailKey = $"{nameof(ContactOptions)}:Email";
    var client = new ConfigurationClient(azureOptions.Value.AppConfigurationEndpoint, new DefaultAzureCredential());
    var settingToCreate = new ConfigurationSetting(EmailKey, Model!.Email);
    await client.SetConfigurationSettingAsync(settingToCreate);

    //await RefreshConfiguration();
  }

  public async Task RefreshConfiguration()
  {
    foreach (var refresher in refresherProvider.Refreshers)
    {
      await refresher.TryRefreshAsync();
    }
  }
}