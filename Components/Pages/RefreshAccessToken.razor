@page "/admin/refresh-token"
@using Azure.Data.AppConfiguration
@using Azure.Identity
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Extensions.Configuration.AzureAppConfiguration
@using Microsoft.Extensions.Configuration.UserSecrets
@using Microsoft.Extensions.Options
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using System.Text.Json
@using System.Dynamic
@using bodyline_sports.Components.Components
@using bodyline_sports.Models
@using bodyline_sports.Services
@using global::bodyline_sports.Options

@inject IOptionsSnapshot<ContactOptions> contactOptions
@inject IOptions<AzureOptions> azureOptions
@inject IOptions<FacebookOptions> facebookOptions
@inject IFacebook facebook
@inject ILogger<Admin> logger

@inject IConfigurationRefresherProvider refresherProvider
@inject IHttpContextAccessor httpContextAccessor

@attribute [Authorize(Policy = "Admin")]

<PageTitle>Bodyline Sports (Admin)</PageTitle>

<AuthorizeView Context="authContext" Policy="Admin">
  <Authorized>
    <a class="flex justify-end pr-2" href="/Account/SignOut">Hello, @authContext.User.Identity?.Name!</a>
    
    <h2 class="font-semibold">Access token</h2>
    <div>
        <p class="text-sm text-gray-400 p-2.5">Access token will now expire on @(ExpiresAt?.LocalDateTime.ToString() ?? "🤷‍♂️")
        </p>
    </div>
  </Authorized>
  <NotAuthorized>
    <p>You're not authorized.</p>
  </NotAuthorized>
</AuthorizeView>

@code {
  private DateTimeOffset? ExpiresAt { get; set; }
  private string? LongLivedAccessToken { get; set; }
  private string? UserAccessToken { get; set; }

  protected async override Task OnInitializedAsync()
  {
    const string AccessTokenKey = $"{nameof(FacebookOptions)}:AccessToken";
    
    LongLivedAccessToken = await facebook.ExchangeForLongLivedToken(UserAccessToken!);
    ExpiresAt = (await facebook.GetTokenDetails(LongLivedAccessToken, UserAccessToken!)).Data.ExpiresAt;

    var client = new ConfigurationClient(azureOptions.Value.AppConfigurationEndpoint, new DefaultAzureCredential());
    await client.SetConfigurationSettingAsync(new ConfigurationSetting(AccessTokenKey, LongLivedAccessToken));

    await base.OnInitializedAsync();
  }

  protected override void OnInitialized()
  {
    if (httpContextAccessor.HttpContext?.User.Identity?.IsAuthenticated ?? false)
    {
      var authFeatures = httpContextAccessor.HttpContext?.Features.Get<IAuthenticateResultFeature>();
      UserAccessToken = authFeatures!.AuthenticateResult!.Properties!.GetTokenValue("access_token");
      LongLivedAccessToken = facebookOptions.Value.AccessToken;
    }

    base.OnInitialized();
  }

  private async Task RefreshConfiguration()
  {
    foreach (var refresher in refresherProvider.Refreshers)
    {
      await refresher.TryRefreshAsync();
    }
  }
}